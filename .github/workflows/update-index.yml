name: Update HTML Table List

on:
  push:
    paths:
      - 'tables/**'
  workflow_dispatch:

jobs:
  update-html:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Update HTML with table list
        run: |
          # Create Python script to update HTML
          cat > update_html.py << 'EOF'
          import os
          import re
          import datetime
          
          # Find all markdown files in the tables directory
          table_files = []
          try:
              for file in os.listdir('tables'):
                  if file.endswith('.md'):
                      table_files.append(file)
          except FileNotFoundError:
              print("Tables directory not found. Creating empty directory.")
              os.makedirs('tables', exist_ok=True)
          
          # Sort the files by modification time (newest first)
          if table_files:
              table_files.sort(key=lambda x: os.path.getmtime(os.path.join('tables', x)), reverse=True)
          
          # Generate the HTML table rows
          table_rows = ""
          for file in table_files:
              file_path = os.path.join('tables', file)
              mod_time = os.path.getmtime(file_path)
              
              # Format the date
              date_str = datetime.datetime.fromtimestamp(mod_time).strftime('%Y-%m-%d %H:%M:%S')
              
              # Try to extract server name from the first line of the file
              server_name = "Unknown Server"
              try:
                  with open(file_path, 'r', encoding='utf-8') as f:
                      first_line = f.readline().strip()
                      # Use regex to extract just the URL part - improved pattern for all URLs
                      url_match = re.search(r'Subscriptions for (http://[^\s"<>]+)', first_line)
                      if url_match:
                          server_name = url_match.group(1)
              except Exception as e:
                  print(f"Error processing {file}: {e}")
              
              # Create HTML table row
              table_rows += f'''
                <tr>
                    <td><a href="./tables/{file}">{file}</a></td>
                    <td>{date_str} - {server_name}</td>
                </tr>'''
          
          # If no files found, add a message
          if not table_rows:
              table_rows = '''
                <tr>
                    <td colspan="2" style="text-align: center;">No tables available yet</td>
                </tr>'''
          
          # Read the HTML file
          with open('index.html', 'r', encoding='utf-8') as f:
              html_content = f.read()
          
          # Update the table list section
          pattern = r'<!-- TABLE_LIST_START -->.*?<tbody>\s*(.*?)\s*</tbody>.*?<!-- TABLE_LIST_END -->'
          replacement = f'<!-- TABLE_LIST_START -->\n            <table>\n                <thead>\n                    <tr>\n                        <th>Filename</th>\n                        <th>Last Updated</th>\n                    </tr>\n                </thead>\n                <tbody>{table_rows}\n                </tbody>\n            </table>\n            <!-- TABLE_LIST_END -->'
          
          # Use re.DOTALL to make . match newlines
          updated_html = re.sub(pattern, replacement, html_content, flags=re.DOTALL)
          
          # Update the "last updated" span
          current_date = datetime.datetime.now().strftime('%B %d, %Y')
          updated_html = re.sub(r'<span id="last-updated">.*?</span>', f'<span id="last-updated">{current_date}</span>', updated_html)
          
          # Write the updated HTML
          with open('index.html', 'w', encoding='utf-8') as f:
              f.write(updated_html)
          EOF
          
          # Run the script
          python update_html.py
          
      - name: Commit and push if changed
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          # First stash any unstaged changes
          git stash -u || true
          # Pull latest changes
          git pull
          # Apply the HTML changes
          python update_html.py
          # Add and commit if there are changes
          git add index.html
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update HTML table list [automated]" && git push)
